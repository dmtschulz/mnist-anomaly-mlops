name: üöÄ MLOps Deployment Pipeline

on:
  workflow_dispatch: # –ó–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é

env:
  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GHCR
  GHCR_USERNAME: ${{ github.actor }}
  REPO_NAME: ${{ github.event.repository.name }}
  IMAGE_BACKEND: ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}-backend
  IMAGE_FRONTEND: ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}-frontend
  
  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AWS Deployment
  AWS_REGION: ${{ secrets.AWS_REGION }}
  DEPLOYMENT_INSTANCE_NAME: mnist-anomaly-MLOps-Deployment-Server # –ò–º—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞
  

jobs:
  # 1. –°–ë–û–†–ö–ê –ò –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –û–ë–û–ò–• –û–ë–†–ê–ó–û–í
  build_and_push_deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # –°–±–æ—Ä–∫–∞ –∏ –ø—É—à Backend
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ env.IMAGE_BACKEND }}:latest

      # –°–±–æ—Ä–∫–∞ –∏ –ø—É—à Frontend
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ env.IMAGE_FRONTEND }}:latest

  # 2. –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ù–ê EC2 –ß–ï–†–ï–ó SSM
  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: [build_and_push_deployment] # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # –ù—É–∂–Ω–æ –¥–ª—è docker-compose.yml

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Get Deployment Instance ID
        id: get_id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ env.DEPLOYMENT_INSTANCE_NAME }}" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Deploy with Docker Compose via SSM
        env:
          INSTANCE_ID: ${{ steps.get_id.outputs.INSTANCE_ID }}
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ Deployment Server
        run: |
          if [ -z "$INSTANCE_ID" ]; then
            echo "Deployment instance not found!"
            exit 1
          fi

          # 1. –ö–æ–ø–∏—Ä—É–µ–º docker-compose.yml –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          aws s3 cp docker-compose.yml s3://${{ secrets.S3_BUCKET_NAME }}/deployment/docker-compose.yml

          SSM_COMMAND="
          # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ docker-compose
          aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/deployment/docker-compose.yml ./docker-compose.yml
          
          # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Docker
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –∏ –∑–∞–ø—É—Å–∫
          docker compose pull
          docker compose up -d --remove-orphans
          "

          # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã SSM
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "MLOps Deployment" \
            --parameters commands="$SSM_COMMAND" \
            --output text
          
          # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å aws ssm wait, –Ω–æ –¥–ª—è deploy - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)