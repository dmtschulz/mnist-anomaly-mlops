name: üöÄ MLOps Deployment Pipeline

on:
  workflow_dispatch: # –ó–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é

env:
  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GHCR
  GHCR_USERNAME: ${{ github.actor }}
  REPO_NAME: ${{ github.event.repository.name }}
  IMAGE_BACKEND: ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}-backend
  IMAGE_FRONTEND: ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}-frontend

jobs:
  # 1. –°–ë–û–†–ö–ê –ò –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –û–ë–û–ò–• –û–ë–†–ê–ó–û–í
  build_and_push_deployment:
    runs-on: ubuntu-latest
    permissions:
      contents: read # –ß—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å –∫–æ–¥
      packages: write # –ß—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ GHCR (Container Registry)
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # –°–±–æ—Ä–∫–∞ –∏ –ø—É—à Backend
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ env.IMAGE_BACKEND }}:latest

      # –°–±–æ—Ä–∫–∞ –∏ –ø—É—à Frontend
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ env.IMAGE_FRONTEND }}:latest

# 2. –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ù–ê EC2 –ß–ï–†–ï–ó SSM
  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: [build_and_push_deployment]
    
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }} # <-- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!
      DEPLOYMENT_INSTANCE_NAME: MNIST-anomaly-MLOps-Deployment-Server
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Get Deployment Instance ID
        id: get_id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ env.DEPLOYMENT_INSTANCE_NAME }}" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Deploy with Docker Compose via SSM
        env:
          INSTANCE_ID: ${{ steps.get_id.outputs.INSTANCE_ID }}
          # GITHUB_TOKEN –Ω—É–∂–µ–Ω –¥–ª—è –ª–æ–≥–∏–Ω–∞ –≤ GHCR
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        run: |
          if [ -z "$INSTANCE_ID" ]; then
            echo "Deployment instance not found!"
            exit 1
          fi
          
          # --- 1. –ö–æ–ø–∏—Ä—É–µ–º docker-compose.yml –≤ S3 (–ò—Å–ø–æ–ª—å–∑—É–µ–º env.S3_BUCKET_NAME)
          aws s3 cp docker-compose.yml s3://${{ env.S3_BUCKET_NAME }}/deployment/docker-compose.yml

          SSM_COMMAND="
          # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–π —Å—Ä–µ–¥—ã
          DEPLOY_DIR=/opt/mlops-deploy
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∞ ec2-user, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ Errno 13
          sudo mkdir -p $DEPLOY_DIR
          sudo chown -R ec2-user:ec2-user $DEPLOY_DIR
          cd $DEPLOY_DIR
          
          # 2. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ docker-compose –∏–∑ S3 (–ò—Å–ø–æ–ª—å–∑—É–µ–º env.S3_BUCKET_NAME)
          aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/deployment/docker-compose.yml ./docker-compose.yml
          
          # 3. –≠–ö–°–ü–û–†–¢ –ü–ï–†–ï–ú–ï–ù–ù–´–• –¥–ª—è Docker Compose
          # GitHub Actions –ø–æ–¥—Å—Ç–∞–≤–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è secrets/env —Å—é–¥–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
          export AWS_REGION=${{ env.AWS_REGION }}
          export S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }}
          
          # 4. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Docker –≤ GHCR (–ò—Å–ø–æ–ª—å–∑—É–µ–º GH_TOKEN –∏–∑ env)
          echo ${{ env.GH_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –∏ –∑–∞–ø—É—Å–∫
          docker compose pull
          docker compose up -d --remove-orphans
          "

          # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã SSM
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "MLOps Deployment" \
            --parameters commands="$SSM_COMMAND" \
            --output text