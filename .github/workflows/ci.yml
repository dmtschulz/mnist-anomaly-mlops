name: Continuous Integration (CI)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # 1. STATIC ANALYSIS (Linting)
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Get code from Git

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Lint Dependencies (Flake8)
        run: |
          pip install flake8

      - name: Run Flake8 Linter
        # Check files: train.py, main.py and app.py
        run: |
          flake8 app/main.py src/train.py frontend/app.py --max-line-length=120 --exclude=__init__.py
        # If this command returns error, job will fail.

  # 2. FAST UNIT-TESTS (Test of correctness)
  unit_test:
    runs-on: ubuntu-latest
    needs: [lint] # Run only if Linting was successful
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Backend Dependencies
        # Use backend file dependencies for tests
        # and install framework for testing
        run: |
          pip install -r requirements-backend.txt
          pip install pytest  

      # NOTE: This step assumes we have a test file (e.g., test_api.py). 
      # Leave stub for now.
      - name: Run Pytest (Fast Tests)
        run: |
          echo "Running fast unit tests..."
          # pytest # <--- Run this when we will have tests

  # 3. НЕПРЕРЫВНАЯ ДОСТАВКА (Обучение и Публикация)
  train_and_publish:
    runs-on: ubuntu-latest
    needs: [unit_test] 

    environment: production 

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Training Dependencies
        run: |
          pip install -r requirements-backend.txt

      - name: Run Model Training
        # Запускаем ваш скрипт тренировки. Он сохранит model.pth и metrics.txt
        run: python src/train.py

      - name: Determine new Model Tag (for versioning)
        id: versioning
        run: echo "NEW_TAG=v$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT 
        # Output: versioning.outputs.NEW_TAG будет содержать тег

      - name: Save Training Metric (Read Loss)
        id: read_metric
        # Считываем метрику из файла metrics.txt
        run: |
          LOSS_VALUE=$(grep "test_loss" metrics.txt | cut -d '=' -f2)
          echo "NEW_LOSS=$LOSS_VALUE" >> $GITHUB_ENV # Сохраняем в переменную среды (env.NEW_LOSS)
          echo "BEST_LOSS=${{ secrets.BEST_MODEL_LOSS }}" >> $GITHUB_ENV # Секрет тоже в env
          echo "New Loss: $LOSS_VALUE"
          # --- ШАГ ГЕЙТИНГА: СРАВНЕНИЕ И ПУБЛИКАЦИЯ ---
      - name: Compare and Publish Model (Conditional Step)
        # Условие: публиковать, только если новый Loss меньше лучшего
        if: success() && env.NEW_LOSS < env.BEST_LOSS
        run: |
          echo "Новая модель лучше! Публикуем с тегом ${{ steps.versioning.outputs.NEW_TAG }}..."
          
          # Загружаем на Hugging Face
          python src/publish_model.py
        env:
          HF_TOKEN_WRITE: ${{ secrets.HF_TOKEN_WRITE }} 
          NEW_TAG: ${{ steps.versioning.outputs.NEW_TAG }} 
          REPO_ID: 'dmtschulz/anomaly-detection-model'

      - name: Skip Publishing
        if: success() && env.NEW_LOSS >= env.BEST_LOSS
        run: |
            echo "Модель не улучшилась (новый Loss: ${{ env.NEW_LOSS }} vs. Best: ${{ env.BEST_LOSS }}). Пропускаем публикацию."