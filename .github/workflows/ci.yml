# .github/workflows/ci.yml

name: Continuous Integration (CI)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # 1. STATIC ANALYSIS (Linting)
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Get code from Git

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Lint Dependencies (Flake8)
        run: |
          pip install flake8

      - name: Run Flake8 Linter
        # Check files: train.py, main.py and app.py
        run: |
          flake8 app/main.py src/train.py frontend/app.py --max-line-length=120 --exclude=__init__.py
        # If this command returns error, job will fail.

  # 2. FAST UNIT-TESTS (Test of correctness)
  unit_test:
    runs-on: ubuntu-latest
    needs: [lint] # Run only if Linting was successful
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'                       
          cache-dependency-path: |
                 requirements-backend.txt

      - name: Install Backend Dependencies
        # Use backend file dependencies for tests
        # and install framework for testing
        run: |
          pip install -r requirements-backend.txt
          pip install pytest  

      # NOTE: This step assumes we have a test file (e.g., test_api.py). 
      # Leave stub for now.
      - name: Run Pytest (Fast Tests)
        run: |
          echo "Running fast unit tests..."
          # pytest # <--- Run this when we will have tests

  # 3. CONTINUES DELIVERY (TRAIN AND PUBLISH)
  train_and_publish:
    if: false
    runs-on: ubuntu-latest
    needs: [unit_test] 

    environment: production 

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: |
                 requirements-backend.txt

      - name: Cache MNIST Data
        uses: actions/cache@v4
        with:
          path: ./data 
          key: ${{ runner.os }}-mnist-data-v1

      - name: Install Training Dependencies
        run: |
          pip install -r requirements-backend.txt

      - name: Run Model Training
        # Run training script, it will save model.pth and metrics.txt
        run: python src/train.py

      - name: Determine new Model Tag (for versioning)
        id: versioning
        run: echo "NEW_TAG=v$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT 
        # Output: versioning.outputs.NEW_TAG will contain TAG

      - name: Save Training Metric (Read Loss)
        id: read_metric
        # Read metric from file metrics.txt
        run: |
          LOSS_VALUE=$(grep "test_loss" metrics.txt | cut -d '=' -f2)
          echo "NEW_LOSS=$LOSS_VALUE" >> $GITHUB_ENV # Save in env variable (env.NEW_LOSS)
          echo "BEST_LOSS=${{ secrets.BEST_MODEL_LOSS }}" >> $GITHUB_ENV # Secret also in env
          echo "New Loss: $LOSS_VALUE"
          # --- GATING STEP: COMPARISON AND PUBLISHING ---
      - name: Compare and Publish Model (Conditional Step)
        # Condition: publish only, if new Loss less then best
        if: success() && env.NEW_LOSS < env.BEST_LOSS
        run: |
          echo "New model is better! Publish with tag ${{ steps.versioning.outputs.NEW_TAG }}..."
          
          # Load on Hugging Face
          python src/publish_model.py
        env:
          HF_TOKEN_WRITE: ${{ secrets.HF_TOKEN_WRITE }} 
          NEW_TAG: ${{ steps.versioning.outputs.NEW_TAG }} 
          REPO_ID: 'dmtschulz/anomaly-detection-model'

      - name: Skip Publishing
        if: success() && env.NEW_LOSS >= env.BEST_LOSS
        run: |
            echo "Model wasn't better (new Loss: ${{ env.NEW_LOSS }} vs. Best: ${{ env.BEST_LOSS }}). Skip publishing."

  # 4. CONTINUES DEPLOYMENT (Build and Publish Docker)
  build_push_docker_backend:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read # Standard read right
      packages: write # <-- NEED FOR GHCR

    if: always()
    
    # Запускаем только если train_and_publish успешен. 
    # В реальном MLOps, этот job лучше настроить на триггер 'push to main',
    # но для простоты мы оставим зависимость.
    # needs: [train_and_publish] 
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create dummy models folder
        run: mkdir -p models

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          # GITHUB_TOKEN proposed by GitHub and has write rights for GHCR
          password: ${{ secrets.GITHUB_TOKEN }} 

      - name: Determine Docker Tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Image name will be: ghcr.io/<USER_NAME>/<REPOSITORY>
          images: ghcr.io/${{ github.actor }}/mnist-anomaly-mlops-backend
          tags: |
            type=raw,value=latest
            type=sha,format=short # Short SHA-hash commits

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend 
          push: true
          platforms: linux/amd64,linux/arm64 
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # 5. НЕПРЕРЫВНОЕ РАЗВЕРТЫВАНИЕ ФРОНТЕНДА
  build_push_docker_frontend:
    runs-on: ubuntu-latest
    needs: [unit_test] # Фронтенд зависит только от успешного прохождения тестов/CI
    
    permissions:
      contents: read 
      packages: write # Для публикации в GHCR
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} 

      - name: Determine Docker Tag for Frontend
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Важно: используем отдельный тег, чтобы отличать от бэкенда
          images: ghcr.io/${{ github.actor }}/mnist-anomaly-mlops-frontend
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build and Push Docker Image (Frontend)
        uses: docker/build-push-action@v5
        with:
          context: .
          # КЛЮЧЕВОЕ ИСПРАВЛЕНИЕ: Используем Dockerfile.frontend
          file: ./Dockerfile.frontend 
          push: true
          platforms: linux/amd64,linux/arm64 
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}